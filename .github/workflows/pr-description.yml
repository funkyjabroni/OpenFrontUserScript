name: üßº PR

on:
  merge_group:
    types:
      - checks_requested
  pull_request:
    types:
      - demilestoned
      - edited
      - milestoned
      - opened
      - synchronize

permissions: {}

jobs:
  validate-description:
    name: Validate Description
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || '';

            const errors = [];

            // Check for ## Description section
            const descMatch = body.match(/^## Description:\s*\n([\s\S]*?)(?:^## |\Z)/m);
            if (!descMatch || descMatch[1].trim().length < 20) {
              errors.push('‚ùå Missing or short `## Description:` section.');
            }

            // Check all five boxes are checked
            const requiredBoxes = [
              /- \[x\] I have added screenshots for all UI updates/i,
              /- \[x\] I process any text displayed to the user through translateText\(\) and I\'ve added it to the en\.json file/i,
              /- \[x\] I have added relevant tests to the test directory/i,
              /- \[x\] I confirm I have thoroughly tested these changes and take full responsibility for any bugs introduced/i,
              /- \[x\] I have read and accepted the CLA agreement \(only required once\)\./i
            ];

            for (const box of requiredBoxes) {
              if (!box.test(body)) {
                errors.push('‚ùå One or more checklist items are not checked.');
                break;
              }
            }

            if (errors.length > 0) {
              core.setFailed(errors.join('\n'));
            } else {
              console.log('‚úÖ PR description and checklist look good.');
            }

  has-milestone:
    name: Has Milestone
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            let prs = [];

            if (context.eventName === 'merge_group') {
              const sha = context.payload.merge_group.head_sha;
              console.log(`‚ÑπÔ∏è Merge group detected. Looking up PRs for commit ${sha}...`);

              prs = await github.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: sha,
                headers: { accept: 'application/vnd.github.groot-preview+json' }
              }).then(r => r.data);
            } else {
              prs = [context.payload.pull_request];
            }

            if (!prs || prs.length === 0) {
              core.setFailed('‚ùå No associated PRs found for this commit.');
              return;
            }

            for (const pr of prs) {
              if (!pr.milestone) {
                core.setFailed(`‚ùå PR #${pr.number} is missing a milestone.`);
                return;
              }
              console.log(`‚úÖ PR #${pr.number} has milestone: ${pr.milestone.title}`);
            }
